/*
 * Copyright 2018 Coupang Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/plugins-release" }

    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "io.spring.gradle:propdeps-plugin:0.0.9.RELEASE"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "com.palantir:jacoco-coverage:0.4.0"

        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"

        classpath "com.netflix.nebula:nebula-publishing-plugin:9.0.2"
        classpath "com.netflix.nebula:nebula-release-plugin:8.0.1"
    }
}

plugins {
    id "com.jfrog.bintray" version "1.8.4"
}

apply plugin: 'nebula.nebula-release'

allprojects {
    group = 'com.coupang'
    version = "$baseVersion" + "$snapshotVersion"

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/release" }
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'

    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'

    apply plugin: "io.spring.dependency-management"
    apply plugin: 'idea'
    apply plugin: 'project-report'

    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'nebula.maven-publish'

    rootProject.tasks.release.finalizedBy tasks.publish

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
        }

        dependencies {
            dependency "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
            dependency "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-io:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-nio:$kotlinx_coroutines_version"
            dependency "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinx_coroutines_version"

            dependency "io.requery:requery:$requery_version"
            dependency "io.requery:requery-kotlin:$requery_version"
            dependency "io.requery:requery-jackson:$requery_version"
            dependency "io.requery:requery-processor:$requery_version"

            dependency "org.slf4j:slf4j-api:1.7.25"
            dependency "ch.qos.logback:logback-classic:1.2.3"
            dependency "io.github.microutils:kotlin-logging:1.5.4"


            dependency "org.projectlombok:lombok:1.18.0"

            // JSR-310 Backport for JDK 7 / JDK 6
            dependency "org.threeten:threetenbp:1.3.6"

            dependency "com.zaxxer:HikariCP:3.2.0"

            dependency "org.jetbrains:annotations:16.0.3"
            dependency "com.google.code.findbugs:jsr305:3.0.2"

            dependency "javax.cache:cache-api:1.1.0"
            dependency "javax.inject:javax.inject:1"
            dependency "javax.annotation:javax.annotation-api:1.3.2"
            dependency "javax.interceptor:javax.interceptor-api:1.2.2"
            dependency "javax.persistence:persistence-api:1.0.2"
            dependency "javax.validation:validation-api:2.0.1.Final"
            dependency "org.eclipse.persistence:javax.persistence:2.2.0"

            dependency "org.javassist:javassist:3.22.0-GA"

            // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
            dependency "org.apache.commons:commons-lang3:3.7"
            dependency "org.apache.commons:commons-collections4:4.1"

            dependency "org.cache2k:cache2k-core:1.2.1.Final"
            dependency "org.cache2k:cache2k-jcache:1.2.1.Final"

            dependency "org.redisson:redisson:3.10.3"

            dependency "org.xerial.snappy:snappy-java:1.1.7.1"
            dependency "de.ruedigermoeller:fst:2.57"

            dependency "org.assertj:assertj-core:3.10.0"
            dependency "org.mockito:mockito-core:2.19.0"
            dependency "com.nhaarman:mockito-kotlin:1.6.0"

            dependency "mysql:mysql-connector-java:8.0.11"
            dependency "org.postgresql:postgresql:42.2.5"

            dependency "com.h2database:h2:1.4.197"
            dependency "org.testcontainers:mysql:1.7.3"
            dependency "org.testcontainers:mariadb:1.7.3"
            dependency "org.testcontainers:postgresql:1.7.3"

            dependency "org.testcontainers:testcontainers:$testcontainers_version"
            dependency "org.testcontainers:mysql:$testcontainers_version"
            dependency "org.testcontainers:mariadb:$testcontainers_version"
            dependency "org.testcontainers:postgresql:$testcontainers_version"
        }
    }

    dependencies {

        compileOnly "com.google.code.findbugs:jsr305"
        testCompileOnly "com.google.code.findbugs:jsr305"

        implementation "org.slf4j:slf4j-api"
        testImplementation "ch.qos.logback:logback-classic"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
        testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

        testImplementation "org.assertj:assertj-core"
        testImplementation "org.mockito:mockito-core"

        testImplementation "com.fasterxml.jackson.core:jackson-core"
        testImplementation "com.fasterxml.jackson.core:jackson-databind"
        testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
        testImplementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"

        testImplementation "org.cache2k:cache2k-core"
        testImplementation "org.cache2k:cache2k-jcache"

        testImplementation "io.reactivex.rxjava2:rxjava"
        testImplementation "io.projectreactor:reactor-core"

        // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
        testRuntime "org.junit.platform:junit-platform-launcher:$junit_platform_version"
        testRuntime "org.junit.platform:junit-platform-console-standalone:$junit_platform_version"

        testImplementation "org.springframework.boot:spring-boot-starter-jdbc"
        testImplementation "org.springframework.boot:spring-boot-starter-test"

        testImplementation "com.zaxxer:HikariCP"
        testImplementation "mysql:mysql-connector-java"
        testImplementation "org.postgresql:postgresql"

        testImplementation "com.h2database:h2"
        testImplementation "org.testcontainers:testcontainers"
        testImplementation "org.testcontainers:mysql"
        testImplementation "org.testcontainers:postgresql"
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }


    test {
        useJUnitPlatform()
        // systemProperty 'java.util.logging.manager', 'ch.qos.logback.classic.Logger'

        ignoreFailures true
        // maxParallelForks 4
        // set heap size for the test JVM(s)
        minHeapSize = "1G"
        maxHeapSize = "4G"
        jvmArgs "-XX:ReservedCodeCacheSize=2g"
    }

    jacoco {
        toolVersion = "0.8.1"
    }

    jar {
        manifest.attributes["Specification-Title"] = "Spring Data Requery"
        manifest.attributes["Specification-Version"] = project.version
        manifest.attributes["Implementation-Title"] = project.name
        manifest.attributes["Implementation-Version"] = project.version
        manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')
        manifest.attributes["Created-By"] =
                "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // Skip Documentation Tasks?
    def skipDocumantation = false


    if (!skipDocumantation) {
        dokka {
            outputFormat = 'html'
            outputDirectory = "$buildDir/dokka"
            // reportNotDocumented = false

            includes = ['README.md']
        }

        task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
            includes = ['README.md']

            outputFormat = 'javadoc'
            outputDirectory = "$buildDir/javadoc"
            // reportNotDocumented = false
        }

        // Too slow ...
        task dokkaJar(type: Jar, dependsOn: 'dokka') {
            classifier = 'kdoc'
            from fileTree(new File(project.buildDir, 'kdoc'))
        }

        task javadocJar(type: Jar, dependsOn: 'dokkaJavadoc') {
            classifier = 'javadoc'
            // from dokkaJavadoc.outputDirectory
            from fileTree(new File(project.buildDir, 'javadoc'))
        }
    }

    artifacts {
        archives sourcesJar
    }

    def pomConfig = {
        licenses {
            license {
                name "The Apache Software License, Version 2.0"
                url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "debop"
                name "Sunghyouk Bae"
                email "debop@coupang.com"
            }
        }

        scm {
            url "https://github.com/coupang/spring-data-requery"
        }
    }

    publishing {
        publications {
            nebula(MavenPublication) {
                artifact sourcesJar
                if (!skipDocumantation) {
                    artifact dokkaJar
                    artifact javadocJar
                }
            }
        }
        repositories {
            maven { url "https://bintray.com/coupang/coupang-oss-repository" }
            mavenLocal()
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['MavenPublication']
        publish = true
        pkg {
            repo = 'coupang-oss-repository'
            name = "spring-data-requery"
            userOrg = 'debop'
            licenses = ['Apache-2.0']
            vcsUrl = 'https://github.com/coupang/spring-data-requery.git'

            version {
                name = "$version"
                desc = 'Spring Data with Requery'
                released = new Date()
                vcsTag = "$version"
            }
        }
    }

    clean {
        delete('./out')
    }
}